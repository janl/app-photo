(function() {
/*
 RequireJS 1.0.7 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.
 Available via the MIT or new BSD license.
 see: http://github.com/jrburke/requirejs for details
*/
var requirejs,require,define;
(function(){function J(a){return N.call(a)==="[object Function]"}function F(a){return N.call(a)==="[object Array]"}function Z(a,c,l){for(var j in c)if(!(j in K)&&(!(j in a)||l))a[j]=c[j];return d}function O(a,c,d){a=Error(c+"\nhttp://requirejs.org/docs/errors.html#"+a);if(d)a.originalError=d;return a}function $(a,c,d){var j,k,s;for(j=0;s=c[j];j++){s=typeof s==="string"?{name:s}:s;k=s.location;if(d&&(!k||k.indexOf("/")!==0&&k.indexOf(":")===-1))k=d+"/"+(k||s.name);a[s.name]={name:s.name,location:k||
s.name,main:(s.main||"main").replace(ea,"").replace(aa,"")}}}function U(a,c){a.holdReady?a.holdReady(c):c?a.readyWait+=1:a.ready(!0)}function fa(a){function c(b,f){var g,m;if(b&&b.charAt(0)===".")if(f){q.pkgs[f]?f=[f]:(f=f.split("/"),f=f.slice(0,f.length-1));g=b=f.concat(b.split("/"));var a;for(m=0;a=g[m];m++)if(a===".")g.splice(m,1),m-=1;else if(a==="..")if(m===1&&(g[2]===".."||g[0]===".."))break;else m>0&&(g.splice(m-1,2),m-=2);m=q.pkgs[g=b[0]];b=b.join("/");m&&b===g+"/"+m.main&&(b=g)}else b.indexOf("./")===
0&&(b=b.substring(2));return b}function l(b,f){var g=b?b.indexOf("!"):-1,m=null,a=f?f.name:null,h=b,e,d;g!==-1&&(m=b.substring(0,g),b=b.substring(g+1,b.length));m&&(m=c(m,a));b&&(m?e=(g=n[m])&&g.normalize?g.normalize(b,function(b){return c(b,a)}):c(b,a):(e=c(b,a),d=F[e],d||(d=i.nameToUrl(b,null,f),F[e]=d)));return{prefix:m,name:e,parentMap:f,url:d,originalName:h,fullName:m?m+"!"+(e||""):e}}function j(){var b=!0,f=q.priorityWait,g,a;if(f){for(a=0;g=f[a];a++)if(!r[g]){b=!1;break}b&&delete q.priorityWait}return b}
function k(b,f,g){return function(){var a=ga.call(arguments,0),c;if(g&&J(c=a[a.length-1]))c.__requireJsBuild=!0;a.push(f);return b.apply(null,a)}}function s(b,f,g){f=k(g||i.require,b,f);Z(f,{nameToUrl:k(i.nameToUrl,b),toUrl:k(i.toUrl,b),defined:k(i.requireDefined,b),specified:k(i.requireSpecified,b),isBrowser:d.isBrowser});return f}function p(b){var f,g,a,c=b.callback,h=b.map,e=h.fullName,ba=b.deps;a=b.listeners;if(c&&J(c)){if(q.catchError.define)try{g=d.execCb(e,b.callback,ba,n[e])}catch(j){f=j}else g=
d.execCb(e,b.callback,ba,n[e]);if(e)(c=b.cjsModule)&&c.exports!==void 0&&c.exports!==n[e]?g=n[e]=b.cjsModule.exports:g===void 0&&b.usingExports?g=n[e]:(n[e]=g,G[e]&&(S[e]=!0))}else e&&(g=n[e]=c,G[e]&&(S[e]=!0));if(w[b.id])delete w[b.id],b.isDone=!0,i.waitCount-=1,i.waitCount===0&&(I=[]);delete L[e];if(d.onResourceLoad&&!b.placeholder)d.onResourceLoad(i,h,b.depArray);if(f)return g=(e?l(e).url:"")||f.fileName||f.sourceURL,a=f.moduleTree,f=O("defineerror",'Error evaluating module "'+e+'" at location "'+
g+'":\n'+f+"\nfileName:"+g+"\nlineNumber: "+(f.lineNumber||f.line),f),f.moduleName=e,f.moduleTree=a,d.onError(f);for(f=0;c=a[f];f++)c(g)}function t(b,f){return function(g){b.depDone[f]||(b.depDone[f]=!0,b.deps[f]=g,b.depCount-=1,b.depCount||p(b))}}function o(b,f){var g=f.map,a=g.fullName,c=g.name,h=M[b]||(M[b]=n[b]),e;if(!f.loading)f.loading=!0,e=function(b){f.callback=function(){return b};p(f);r[f.id]=!0;z()},e.fromText=function(b,f){var g=P;r[b]=!1;i.scriptCount+=1;i.fake[b]=!0;g&&(P=!1);d.exec(f);
g&&(P=!0);i.completeLoad(b)},a in n?e(n[a]):h.load(c,s(g.parentMap,!0,function(b,a){var c=[],e,m;for(e=0;m=b[e];e++)m=l(m,g.parentMap),b[e]=m.fullName,m.prefix||c.push(b[e]);f.moduleDeps=(f.moduleDeps||[]).concat(c);return i.require(b,a)}),e,q)}function x(b){w[b.id]||(w[b.id]=b,I.push(b),i.waitCount+=1)}function C(b){this.listeners.push(b)}function u(b,f){var g=b.fullName,a=b.prefix,c=a?M[a]||(M[a]=n[a]):null,h,e;g&&(h=L[g]);if(!h&&(e=!0,h={id:(a&&!c?N++ +"__p@:":"")+(g||"__r@"+N++),map:b,depCount:0,
depDone:[],depCallbacks:[],deps:[],listeners:[],add:C},A[h.id]=!0,g&&(!a||M[a])))L[g]=h;a&&!c?(g=l(a),a in n&&!n[a]&&(delete n[a],delete Q[g.url]),a=u(g,!0),a.add(function(){var f=l(b.originalName,b.parentMap),f=u(f,!0);h.placeholder=!0;f.add(function(b){h.callback=function(){return b};p(h)})})):e&&f&&(r[h.id]=!1,i.paused.push(h),x(h));return h}function B(b,f,a,c){var b=l(b,c),d=b.name,h=b.fullName,e=u(b),j=e.id,k=e.deps,o;if(h){if(h in n||r[j]===!0||h==="jquery"&&q.jQuery&&q.jQuery!==a().fn.jquery)return;
A[j]=!0;r[j]=!0;h==="jquery"&&a&&V(a())}e.depArray=f;e.callback=a;for(a=0;a<f.length;a++)if(j=f[a])j=l(j,d?b:c),o=j.fullName,f[a]=o,o==="require"?k[a]=s(b):o==="exports"?(k[a]=n[h]={},e.usingExports=!0):o==="module"?e.cjsModule=k[a]={id:d,uri:d?i.nameToUrl(d,null,c):void 0,exports:n[h]}:o in n&&!(o in w)&&(!(h in G)||h in G&&S[o])?k[a]=n[o]:(h in G&&(G[o]=!0,delete n[o],Q[j.url]=!1),e.depCount+=1,e.depCallbacks[a]=t(e,a),u(j,!0).add(e.depCallbacks[a]));e.depCount?x(e):p(e)}function v(b){B.apply(null,
b)}function E(b,f){var a=b.map.fullName,c=b.depArray,d=!0,h,e,i,l;if(b.isDone||!a||!r[a])return l;if(f[a])return b;f[a]=!0;if(c){for(h=0;h<c.length;h++){e=c[h];if(!r[e]&&!ha[e]){d=!1;break}if((i=w[e])&&!i.isDone&&r[e])if(l=E(i,f))break}d||(l=void 0,delete f[a])}return l}function y(b,a){var g=b.map.fullName,c=b.depArray,d,h,e,i;if(!b.isDone&&g&&r[g]){if(g){if(a[g])return n[g];a[g]=!0}if(c)for(d=0;d<c.length;d++)if(h=c[d])if((e=l(h).prefix)&&(i=w[e])&&y(i,a),(e=w[h])&&!e.isDone&&r[h])h=y(e,a),b.depCallbacks[d](h);
return n[g]}}function D(){var b=q.waitSeconds*1E3,b=b&&i.startTime+b<(new Date).getTime(),a="",c=!1,l=!1,k=[],h,e;if(!(i.pausedCount>0)){if(q.priorityWait)if(j())z();else return;for(h in r)if(!(h in K)&&(c=!0,!r[h]))if(b)a+=h+" ";else if(l=!0,h.indexOf("!")===-1){k=[];break}else(e=L[h]&&L[h].moduleDeps)&&k.push.apply(k,e);if(c||i.waitCount){if(b&&a)return b=O("timeout","Load timeout for modules: "+a),b.requireType="timeout",b.requireModules=a,b.contextName=i.contextName,d.onError(b);if(l&&k.length)for(a=
0;h=w[k[a]];a++)if(h=E(h,{})){y(h,{});break}if(!b&&(l||i.scriptCount)){if((H||ca)&&!W)W=setTimeout(function(){W=0;D()},50)}else{if(i.waitCount){for(a=0;h=I[a];a++)y(h,{});i.paused.length&&z();X<5&&(X+=1,D())}X=0;d.checkReadyState()}}}}var i,z,q={waitSeconds:7,baseUrl:"./",paths:{},pkgs:{},catchError:{}},R=[],A={require:!0,exports:!0,module:!0},F={},n={},r={},w={},I=[],Q={},N=0,L={},M={},G={},S={},Y=0;V=function(b){if(!i.jQuery&&(b=b||(typeof jQuery!=="undefined"?jQuery:null))&&!(q.jQuery&&b.fn.jquery!==
q.jQuery)&&("holdReady"in b||"readyWait"in b))if(i.jQuery=b,v(["jquery",[],function(){return jQuery}]),i.scriptCount)U(b,!0),i.jQueryIncremented=!0};z=function(){var b,a,c,l,k,h;i.takeGlobalQueue();Y+=1;if(i.scriptCount<=0)i.scriptCount=0;for(;R.length;)if(b=R.shift(),b[0]===null)return d.onError(O("mismatch","Mismatched anonymous define() module: "+b[b.length-1]));else v(b);if(!q.priorityWait||j())for(;i.paused.length;){k=i.paused;i.pausedCount+=k.length;i.paused=[];for(l=0;b=k[l];l++)a=b.map,c=
a.url,h=a.fullName,a.prefix?o(a.prefix,b):!Q[c]&&!r[h]&&(d.load(i,h,c),c.indexOf("empty:")!==0&&(Q[c]=!0));i.startTime=(new Date).getTime();i.pausedCount-=k.length}Y===1&&D();Y-=1};i={contextName:a,config:q,defQueue:R,waiting:w,waitCount:0,specified:A,loaded:r,urlMap:F,urlFetched:Q,scriptCount:0,defined:n,paused:[],pausedCount:0,plugins:M,needFullExec:G,fake:{},fullExec:S,managerCallbacks:L,makeModuleMap:l,normalize:c,configure:function(b){var a,c,d;b.baseUrl&&b.baseUrl.charAt(b.baseUrl.length-1)!==
"/"&&(b.baseUrl+="/");a=q.paths;d=q.pkgs;Z(q,b,!0);if(b.paths){for(c in b.paths)c in K||(a[c]=b.paths[c]);q.paths=a}if((a=b.packagePaths)||b.packages){if(a)for(c in a)c in K||$(d,a[c],c);b.packages&&$(d,b.packages);q.pkgs=d}if(b.priority)c=i.requireWait,i.requireWait=!1,z(),i.require(b.priority),z(),i.requireWait=c,q.priorityWait=b.priority;if(b.deps||b.callback)i.require(b.deps||[],b.callback)},requireDefined:function(b,a){return l(b,a).fullName in n},requireSpecified:function(b,a){return l(b,a).fullName in
A},require:function(b,c,g){if(typeof b==="string"){if(J(c))return d.onError(O("requireargs","Invalid require call"));if(d.get)return d.get(i,b,c);c=l(b,c);b=c.fullName;return!(b in n)?d.onError(O("notloaded","Module name '"+c.fullName+"' has not been loaded yet for context: "+a)):n[b]}(b&&b.length||c)&&B(null,b,c,g);if(!i.requireWait)for(;!i.scriptCount&&i.paused.length;)z();return i.require},takeGlobalQueue:function(){T.length&&(ia.apply(i.defQueue,[i.defQueue.length-1,0].concat(T)),T=[])},completeLoad:function(b){var a;
for(i.takeGlobalQueue();R.length;)if(a=R.shift(),a[0]===null){a[0]=b;break}else if(a[0]===b)break;else v(a),a=null;a?v(a):v([b,[],b==="jquery"&&typeof jQuery!=="undefined"?function(){return jQuery}:null]);d.isAsync&&(i.scriptCount-=1);z();d.isAsync||(i.scriptCount-=1)},toUrl:function(b,a){var c=b.lastIndexOf("."),d=null;c!==-1&&(d=b.substring(c,b.length),b=b.substring(0,c));return i.nameToUrl(b,d,a)},nameToUrl:function(b,a,g){var l,k,h,e,j=i.config,b=c(b,g&&g.fullName);if(d.jsExtRegExp.test(b))a=
b+(a?a:"");else{l=j.paths;k=j.pkgs;g=b.split("/");for(e=g.length;e>0;e--)if(h=g.slice(0,e).join("/"),l[h]){g.splice(0,e,l[h]);break}else if(h=k[h]){b=b===h.name?h.location+"/"+h.main:h.location;g.splice(0,e,b);break}a=g.join("/")+(a||".js");a=(a.charAt(0)==="/"||a.match(/^\w+:/)?"":j.baseUrl)+a}return j.urlArgs?a+((a.indexOf("?")===-1?"?":"&")+j.urlArgs):a}};i.jQueryCheck=V;i.resume=z;return i}function ja(){var a,c,d;if(B&&B.readyState==="interactive")return B;a=document.getElementsByTagName("script");
for(c=a.length-1;c>-1&&(d=a[c]);c--)if(d.readyState==="interactive")return B=d;return null}var ka=/(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/mg,la=/require\(\s*["']([^'"\s]+)["']\s*\)/g,ea=/^\.\//,aa=/\.js$/,N=Object.prototype.toString,t=Array.prototype,ga=t.slice,ia=t.splice,H=!!(typeof window!=="undefined"&&navigator&&document),ca=!H&&typeof importScripts!=="undefined",ma=H&&navigator.platform==="PLAYSTATION 3"?/^complete$/:/^(complete|loaded)$/,da=typeof opera!=="undefined"&&opera.toString()==="[object Opera]",
K={},C={},T=[],B=null,X=0,P=!1,ha={require:!0,module:!0,exports:!0},d,t={},I,x,u,D,o,v,E,A,y,V,W;if(typeof define==="undefined"){if(typeof requirejs!=="undefined")if(J(requirejs))return;else t=requirejs,requirejs=void 0;typeof require!=="undefined"&&!J(require)&&(t=require,require=void 0);d=requirejs=function(a,c,d){var j="_",k;!F(a)&&typeof a!=="string"&&(k=a,F(c)?(a=c,c=d):a=[]);if(k&&k.context)j=k.context;d=C[j]||(C[j]=fa(j));k&&d.configure(k);return d.require(a,c)};d.config=function(a){return d(a)};
require||(require=d);d.toUrl=function(a){return C._.toUrl(a)};d.version="1.0.7";d.jsExtRegExp=/^\/|:|\?|\.js$/;x=d.s={contexts:C,skipAsync:{}};if(d.isAsync=d.isBrowser=H)if(u=x.head=document.getElementsByTagName("head")[0],D=document.getElementsByTagName("base")[0])u=x.head=D.parentNode;d.onError=function(a){throw a;};d.load=function(a,c,l){d.resourcesReady(!1);a.scriptCount+=1;d.attach(l,a,c);if(a.jQuery&&!a.jQueryIncremented)U(a.jQuery,!0),a.jQueryIncremented=!0};define=function(a,c,d){var j,k;
typeof a!=="string"&&(d=c,c=a,a=null);F(c)||(d=c,c=[]);!c.length&&J(d)&&d.length&&(d.toString().replace(ka,"").replace(la,function(a,d){c.push(d)}),c=(d.length===1?["require"]:["require","exports","module"]).concat(c));if(P&&(j=I||ja()))a||(a=j.getAttribute("data-requiremodule")),k=C[j.getAttribute("data-requirecontext")];(k?k.defQueue:T).push([a,c,d])};define.amd={multiversion:!0,plugins:!0,jQuery:!0};d.exec=function(a){return eval(a)};d.execCb=function(a,c,d,j){return c.apply(j,d)};d.addScriptToDom=
function(a){I=a;D?u.insertBefore(a,D):u.appendChild(a);I=null};d.onScriptLoad=function(a){var c=a.currentTarget||a.srcElement,l;if(a.type==="load"||c&&ma.test(c.readyState))B=null,a=c.getAttribute("data-requirecontext"),l=c.getAttribute("data-requiremodule"),C[a].completeLoad(l),c.detachEvent&&!da?c.detachEvent("onreadystatechange",d.onScriptLoad):c.removeEventListener("load",d.onScriptLoad,!1)};d.attach=function(a,c,l,j,k,o){var p;if(H)return j=j||d.onScriptLoad,p=c&&c.config&&c.config.xhtml?document.createElementNS("http://www.w3.org/1999/xhtml",
"html:script"):document.createElement("script"),p.type=k||c&&c.config.scriptType||"text/javascript",p.charset="utf-8",p.async=!x.skipAsync[a],c&&p.setAttribute("data-requirecontext",c.contextName),p.setAttribute("data-requiremodule",l),p.attachEvent&&!da?(P=!0,o?p.onreadystatechange=function(){if(p.readyState==="loaded")p.onreadystatechange=null,p.attachEvent("onreadystatechange",j),o(p)}:p.attachEvent("onreadystatechange",j)):p.addEventListener("load",j,!1),p.src=a,o||d.addScriptToDom(p),p;else ca&&
(importScripts(a),c.completeLoad(l));return null};if(H){o=document.getElementsByTagName("script");for(A=o.length-1;A>-1&&(v=o[A]);A--){if(!u)u=v.parentNode;if(E=v.getAttribute("data-main")){if(!t.baseUrl)o=E.split("/"),v=o.pop(),o=o.length?o.join("/")+"/":"./",t.baseUrl=o,E=v.replace(aa,"");t.deps=t.deps?t.deps.concat(E):[E];break}}}d.checkReadyState=function(){var a=x.contexts,c;for(c in a)if(!(c in K)&&a[c].waitCount)return;d.resourcesReady(!0)};d.resourcesReady=function(a){var c,l;d.resourcesDone=
a;if(d.resourcesDone)for(l in a=x.contexts,a)if(!(l in K)&&(c=a[l],c.jQueryIncremented))U(c.jQuery,!1),c.jQueryIncremented=!1};d.pageLoaded=function(){if(document.readyState!=="complete")document.readyState="complete"};if(H&&document.addEventListener&&!document.readyState)document.readyState="loading",window.addEventListener("load",d.pageLoaded,!1);d(t);if(d.isAsync&&typeof setTimeout!=="undefined")y=x.contexts[t.context||"_"],y.requireWait=!0,setTimeout(function(){y.requireWait=!1;y.scriptCount||
y.resume();d.checkReadyState()},0)}})();
define("requireLib", function(){});

// Generated by CoffeeScript 1.3.3
var __slice = [].slice;

define('hoodie/events',[], function() {
  var Events;
  return Events = (function() {

    function Events() {}

    Events.prototype.bind = function(ev, callback) {
      var calls, evs, name, _i, _len, _results;
      evs = ev.split(' ');
      calls = this.hasOwnProperty('_callbacks') && this._callbacks || (this._callbacks = {});
      _results = [];
      for (_i = 0, _len = evs.length; _i < _len; _i++) {
        name = evs[_i];
        calls[name] || (calls[name] = []);
        _results.push(calls[name].push(callback));
      }
      return _results;
    };

    Events.prototype.on = Events.prototype.bind;

    Events.prototype.one = function(ev, callback) {
      return this.bind(ev, function() {
        this.unbind(ev, arguments.callee);
        return callback.apply(this, arguments);
      });
    };

    Events.prototype.trigger = function() {
      var args, callback, ev, list, _i, _len, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      ev = args.shift();
      list = this.hasOwnProperty('_callbacks') && ((_ref = this._callbacks) != null ? _ref[ev] : void 0);
      if (!list) {
        return;
      }
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        callback = list[_i];
        callback.apply(this, args);
      }
      return true;
    };

    Events.prototype.unbind = function(ev, callback) {
      var cb, i, list, _i, _len, _ref;
      if (!ev) {
        this._callbacks = {};
        return this;
      }
      list = (_ref = this._callbacks) != null ? _ref[ev] : void 0;
      if (!list) {
        return this;
      }
      if (!callback) {
        delete this._callbacks[ev];
        return this;
      }
      for (i = _i = 0, _len = list.length; _i < _len; i = ++_i) {
        cb = list[i];
        if (!(cb === callback)) {
          continue;
        }
        list = list.slice();
        list.splice(i, 1);
        this._callbacks[ev] = list;
        break;
      }
      return this;
    };

    return Events;

  })();
});

// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

window.Hoodie = (function() {

  function Hoodie(url) {
    this.url = url;
  }

  Hoodie.prototype.ready = function(cb) {
    var _this = this;
    return require(['hoodie'], function(Hoodie) {
      var hoodie;
      hoodie = new Hoodie(_this.url);
      return hoodie.ready(function() {
        return cb(hoodie);
      });
    });
  };

  return Hoodie;

})();

define('hoodie', ['hoodie/events'], function(Events) {
  var Hoodie;
  return Hoodie = (function(_super) {

    __extends(Hoodie, _super);

    Hoodie.prototype.modules = ['hoodie/store', 'hoodie/config', 'hoodie/account', 'hoodie/remote', 'hoodie/email', 'hoodie/sharing'];

    function Hoodie(base_url) {
      this.base_url = base_url != null ? base_url : '';
      this.base_url = this.base_url.replace(/\/+$/, '');
      this._load_modules();
    }

    Hoodie.prototype.request = function(type, path, options) {
      var defaults;
      if (options == null) {
        options = {};
      }
      defaults = {
        type: type,
        url: "" + this.base_url + path,
        xhrFields: {
          withCredentials: true
        },
        crossDomain: true,
        dataType: 'json'
      };
      return $.ajax($.extend(defaults, options));
    };

    Hoodie.prototype.defer = $.Deferred;

    Hoodie.prototype.isPromise = function(obj) {
      return typeof obj.done === 'function' && typeof obj.fail === 'function';
    };

    Hoodie.prototype._ready_callbacks = [];

    Hoodie.prototype._ready = false;

    Hoodie.prototype.ready = function(callback) {
      if (this._ready) {
        return callback();
      } else {
        return this._ready_callbacks.push(callback);
      }
    };

    Hoodie.prototype._load_modules = function() {
      var _this = this;
      return require(this.modules, function() {
        var Module, ModuleClasses, cb, instance_name, _i, _len;
        ModuleClasses = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        for (_i = 0, _len = ModuleClasses.length; _i < _len; _i++) {
          Module = ModuleClasses[_i];
          instance_name = Module.name.toLowerCase();
          _this[instance_name] = new Module(_this);
        }
        while (cb = _this._ready_callbacks.shift()) {
          cb(_this);
        }
        return _this._ready = true;
      });
    };

    return Hoodie;

  })(Events);
});

// Generated by CoffeeScript 1.3.3


;
define("test", function(){});

// Generated by CoffeeScript 1.3.3

define("hoodie/errors",[], function() {
  var errors;
  return errors = {
    INVALID_KEY: function(id_or_type) {
      var key;
      key = id_or_type.id ? 'id' : 'type';
      return new Error("invalid " + key + " '" + id_or_type[key] + "': numbers and lowercase letters allowed only");
    },
    INVALID_ARGUMENTS: function(msg) {
      return new Error(msg);
    },
    NOT_FOUND: function(type, id) {
      return new Error("" + type + " with " + id + " could not be found");
    }
  };
});

// Generated by CoffeeScript 1.3.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define('hoodie/store', ['hoodie/errors'], function(ERROR) {
  var Store;
  return Store = (function() {

    function Store(hoodie) {
      this.hoodie = hoodie;
      this.clear = __bind(this.clear, this);

      if (!this.is_persistent()) {
        this.db = {
          getItem: function() {
            return null;
          },
          setItem: function() {
            return null;
          },
          removeItem: function() {
            return null;
          },
          key: function() {
            return null;
          },
          length: function() {
            return 0;
          },
          clear: function() {
            return null;
          }
        };
      }
      this.hoodie.on('account:signed_out', this.clear);
    }

    Store.prototype.db = {
      getItem: function(key) {
        return window.localStorage.getItem(key);
      },
      setItem: function(key, value) {
        return window.localStorage.setItem(key, value);
      },
      removeItem: function(key) {
        return window.localStorage.removeItem(key);
      },
      key: function(nr) {
        return window.localStorage.key(nr);
      },
      length: function() {
        return window.localStorage.length;
      },
      clear: function() {
        return window.localStorage.clear();
      }
    };

    Store.prototype.save = function(type, id, object, options) {
      var defer, is_new;
      if (options == null) {
        options = {};
      }
      defer = this.hoodie.defer();
      if (typeof object !== 'object') {
        defer.reject(ERROR.INVALID_ARGUMENTS("object is " + (typeof object)));
        return defer.promise();
      }
      object = $.extend({}, object);
      if (id && !this._is_valid_id(id)) {
        return defer.reject(ERROR.INVALID_KEY({
          id: id
        })).promise();
      }
      if (!this._is_valid_type(type)) {
        return defer.reject(ERROR.INVALID_KEY({
          type: type
        })).promise();
      }
      if (id) {
        is_new = typeof this._cached["" + type + "/" + id] !== 'object';
      } else {
        is_new = true;
        id = this.uuid();
      }
      if (options.remote) {
        object._synced_at = this._now();
      } else if (!options.silent) {
        object.updated_at = this._now();
        object.created_at || (object.created_at = object.updated_at);
      }
      delete object.id;
      delete object.type;
      try {
        object = this.cache(type, id, object, options);
        defer.resolve(object, is_new).promise();
      } catch (error) {
        defer.reject(error).promise();
      }
      return defer.promise();
    };

    Store.prototype.create = function(type, object, options) {
      if (options == null) {
        options = {};
      }
      return this.save(type, void 0, object);
    };

    Store.prototype.update = function(type, id, object_update, options) {
      var defer, _load_promise,
        _this = this;
      if (options == null) {
        options = {};
      }
      defer = this.hoodie.defer();
      _load_promise = this.load(type, id).pipe(function(current_obj) {
        var changed_properties, key, value;
        if (typeof object_update === 'function') {
          object_update = object_update($.extend({}, current_obj));
        }
        if (!object_update) {
          return defer.resolve(current_obj);
        }
        changed_properties = (function() {
          var _results;
          _results = [];
          for (key in object_update) {
            value = object_update[key];
            if (!(current_obj[key] !== value)) {
              continue;
            }
            current_obj[key] = value;
            _results.push(key);
          }
          return _results;
        })();
        if (!changed_properties.length) {
          return defer.resolve(current_obj);
        }
        return _this.save(type, id, current_obj, options).then(defer.resolve, defer.reject);
      });
      _load_promise.fail(function() {
        return _this.save(type, id, object_update, options).then(defer.resolve, defer.reject);
      });
      return defer.promise();
    };

    Store.prototype.updateAll = function(filter_or_objects, object_update, options) {
      var promise,
        _this = this;
      if (options == null) {
        options = {};
      }
      if (this.hoodie.isPromise(filter_or_objects)) {
        promise = filter_or_objects;
      } else {
        promise = this.hoodie.defer().resolve(filter_or_objects).resolve();
      }
      return promise.pipe(function(objects) {
        var defer, object, _update_promises;
        defer = _this.hoodie.defer();
        _update_promises = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = objects.length; _i < _len; _i++) {
            object = objects[_i];
            _results.push(this.update(object.type, object.id, object_update, options));
          }
          return _results;
        }).call(_this);
        $.when.apply(null, _update_promises).then(defer.resolve);
        return defer.promise();
      });
    };

    Store.prototype.load = function(type, id) {
      var defer, object;
      defer = this.hoodie.defer();
      if (!(typeof type === 'string' && typeof id === 'string')) {
        return defer.reject(ERROR.INVALID_ARGUMENTS("type & id are required")).promise();
      }
      try {
        object = this.cache(type, id);
        if (!object) {
          return defer.reject(ERROR.NOT_FOUND(type, id)).promise();
        }
        defer.resolve(object);
      } catch (error) {
        defer.reject(error);
      }
      return defer.promise();
    };

    Store.prototype.loadAll = function(filter) {
      var current_type, defer, id, key, keys, obj, results, type;
      if (filter == null) {
        filter = function() {
          return true;
        };
      }
      defer = this.hoodie.defer();
      keys = this._index();
      if (typeof filter === 'string') {
        type = filter;
        filter = function(obj) {
          return obj.type === type;
        };
      }
      try {
        results = (function() {
          var _i, _len, _ref, _results;
          _results = [];
          for (_i = 0, _len = keys.length; _i < _len; _i++) {
            key = keys[_i];
            if (!(this._is_semantic_id(key))) {
              continue;
            }
            _ref = key.split('/'), current_type = _ref[0], id = _ref[1];
            obj = this.cache(current_type, id);
            if (filter(obj)) {
              _results.push(obj);
            } else {
              continue;
            }
          }
          return _results;
        }).call(this);
        defer.resolve(results).promise();
      } catch (error) {
        defer.reject(error).promise();
      }
      return defer.promise();
    };

    Store.prototype["delete"] = function(type, id, options) {
      var defer, key, object;
      if (options == null) {
        options = {};
      }
      defer = this.hoodie.defer();
      object = this.cache(type, id);
      if (!object) {
        return defer.reject(ERROR.NOT_FOUND(type, id)).promise();
      }
      if (object._synced_at && !options.remote) {
        object._deleted = true;
        this.cache(type, id, object);
      } else {
        key = "" + type + "/" + id;
        this.db.removeItem(key);
        this._cached[key] = false;
        this.clear_changed(type, id);
      }
      return defer.resolve($.extend({}, object));
    };

    Store.prototype.destroy = Store.prototype["delete"];

    Store.prototype.cache = function(type, id, object, options) {
      var key;
      if (object == null) {
        object = false;
      }
      if (options == null) {
        options = {};
      }
      key = "" + type + "/" + id;
      if (object) {
        this._cached[key] = $.extend(object, {
          type: type,
          id: id
        });
        this._setObject(type, id, object);
        if (options.remote) {
          this.clear_changed(type, id);
          return $.extend({}, this._cached[key]);
        }
      } else {
        if (this._cached[key] != null) {
          return $.extend({}, this._cached[key]);
        }
        this._cached[key] = this._getObject(type, id);
      }
      if (this._cached[key] && (this._is_dirty(this._cached[key]) || this._is_marked_as_deleted(this._cached[key]))) {
        this.mark_as_changed(type, id, this._cached[key]);
      } else {
        this.clear_changed(type, id);
      }
      if (this._cached[key]) {
        return $.extend({}, this._cached[key]);
      } else {
        return this._cached[key];
      }
    };

    Store.prototype.clear_changed = function(type, id) {
      var key;
      if (type && id) {
        key = "" + type + "/" + id;
        delete this._dirty[key];
      } else {
        this._dirty = {};
      }
      return this.hoodie.trigger('store:dirty');
    };

    Store.prototype.is_marked_as_deleted = function(type, id) {
      return this._is_marked_as_deleted(this.cache(type, id));
    };

    Store.prototype.mark_as_changed = function(type, id, object) {
      var key, timeout,
        _this = this;
      key = "" + type + "/" + id;
      this._dirty[key] = object;
      this.hoodie.trigger('store:dirty');
      timeout = 2000;
      window.clearTimeout(this._dirty_timeout);
      return this._dirty_timeout = window.setTimeout((function() {
        return _this.hoodie.trigger('store:dirty:idle');
      }), timeout);
    };

    Store.prototype.changed_docs = function() {
      var key, object, _ref, _results;
      _ref = this._dirty;
      _results = [];
      for (key in _ref) {
        object = _ref[key];
        _results.push(object);
      }
      return _results;
    };

    Store.prototype.is_dirty = function(type, id) {
      if (!type) {
        return $.isEmptyObject(this._dirty);
      }
      return this._is_dirty(this.cache(type, id));
    };

    Store.prototype.clear = function() {
      var defer;
      defer = this.hoodie.defer();
      try {
        this.db.clear();
        this._cached = {};
        this.clear_changed();
        defer.resolve();
      } catch (error) {
        defer.reject(error);
      }
      return defer.promise();
    };

    Store.prototype.is_persistent = function() {
      try {
        if (!window.localStorage) {
          return false;
        }
        localStorage.setItem('Storage-Test', "1");
        if (localStorage.getItem('Storage-Test') !== "1") {
          return false;
        }
        localStorage.removeItem('Storage-Test');
      } catch (e) {
        return false;
      }
      return true;
    };

    Store.prototype.uuid = function(len) {
      var chars, i, radix;
      if (len == null) {
        len = 7;
      }
      chars = '0123456789abcdefghijklmnopqrstuvwxyz'.split('');
      radix = chars.length;
      return ((function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; 0 <= len ? _i < len : _i > len; i = 0 <= len ? ++_i : --_i) {
          _results.push(chars[0 | Math.random() * radix]);
        }
        return _results;
      })()).join('');
    };

    Store.prototype._setObject = function(type, id, object) {
      var key, store;
      key = "" + type + "/" + id;
      store = $.extend({}, object);
      delete store.type;
      delete store.id;
      return this.db.setItem(key, JSON.stringify(store));
    };

    Store.prototype._getObject = function(type, id) {
      var json, key, obj;
      key = "" + type + "/" + id;
      json = this.db.getItem(key);
      if (json) {
        obj = JSON.parse(json);
        obj.type = type;
        obj.id = id;
        if (obj.created_at) {
          obj.created_at = new Date(Date.parse(obj.created_at));
        }
        if (obj.updated_at) {
          obj.updated_at = new Date(Date.parse(obj.updated_at));
        }
        if (obj._synced_at) {
          obj._synced_at = new Date(Date.parse(obj._synced_at));
        }
        return obj;
      } else {
        return false;
      }
    };

    Store.prototype._now = function() {
      return new Date;
    };

    Store.prototype._is_valid_id = function(key) {
      return /^[a-z0-9\-]+$/.test(key);
    };

    Store.prototype._is_valid_type = function(key) {
      return /^[a-z$][a-z0-9]+$/.test(key);
    };

    Store.prototype._is_semantic_id = function(key) {
      return /^[a-z$][a-z0-9]+\/[a-z0-9]+$/.test(key);
    };

    Store.prototype._cached = {};

    Store.prototype._dirty = {};

    Store.prototype._is_dirty = function(object) {
      if (!object._synced_at) {
        return true;
      }
      if (!object.updated_at) {
        return false;
      }
      return object._synced_at.getTime() < object.updated_at.getTime();
    };

    Store.prototype._is_marked_as_deleted = function(object) {
      return object._deleted === true;
    };

    Store.prototype._index = function() {
      var i, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.db.length(); 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.db.key(i));
      }
      return _results;
    };

    return Store;

  })();
});

// Generated by CoffeeScript 1.3.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define('hoodie/config',[], function() {
  var Config;
  return Config = (function() {

    Config.prototype.type = '$config';

    Config.prototype.id = 'hoodie';

    Config.prototype.cache = {};

    function Config(hoodie, options) {
      var _this = this;
      this.hoodie = hoodie;
      if (options == null) {
        options = {};
      }
      this.clear = __bind(this.clear, this);

      if (options.type) {
        this.type = options.type;
      }
      if (options.id) {
        this.id = options.id;
      }
      this.hoodie.store.load(this.type, this.id).done(function(obj) {
        return _this.cache = obj;
      });
      this.hoodie.on('account:signed_out', this.clear);
    }

    Config.prototype.set = function(key, value) {
      var is_silent, update;
      if (this.cache[key] === value) {
        return;
      }
      this.cache[key] = value;
      update = {};
      update[key] = value;
      is_silent = key.charAt(0) === '_';
      return this.hoodie.store.update(this.type, this.id, update, {
        silent: is_silent
      });
    };

    Config.prototype.get = function(key) {
      return this.cache[key];
    };

    Config.prototype.clear = function() {
      this.cache = {};
      return this.hoodie.store.destroy(this.type, this.id);
    };

    Config.prototype.remove = Config.prototype.set;

    return Config;

  })();
});

// Generated by CoffeeScript 1.3.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define('hoodie/account',[], function() {
  var Account;
  return Account = (function() {

    Account.prototype.username = void 0;

    function Account(hoodie) {
      this.hoodie = hoodie;
      this._handle_sign_out = __bind(this._handle_sign_out, this);

      this._handle_sign_in = __bind(this._handle_sign_in, this);

      this.authenticate = __bind(this.authenticate, this);

      this.username = this.hoodie.config.get('_account.username');
      this.on('signed_in', this._handle_sign_in);
      this.on('signed_out', this._handle_sign_out);
    }

    Account.prototype.authenticate = function() {
      var defer,
        _this = this;
      defer = this.hoodie.defer();
      if (!this.username) {
        return defer.reject().promise();
      }
      if (this._authenticated === true) {
        return defer.resolve(this.username).promise();
      }
      if (this._authenticated === false) {
        return defer.reject().promise();
      }
      this._auth_request = this.hoodie.request('GET', "/_session");
      this._auth_request.done(function(response) {
        if (response.userCtx.name) {
          _this._authenticated = true;
          _this.username = response.userCtx.name;
          return defer.resolve(_this.username);
        } else {
          _this._authenticated = false;
          delete _this.username;
          _this.hoodie.trigger('account:error:unauthenticated');
          return defer.reject();
        }
      });
      this._auth_request.fail(function(xhr) {
        var error;
        try {
          error = JSON.parse(xhr.responseText);
        } catch (e) {
          error = {
            error: xhr.responseText || "unknown"
          };
        }
        return defer.reject(error);
      });
      return defer.promise();
    };

    Account.prototype.sign_up = function(username, password) {
      var data, defer, handle_succes, key, request_promise,
        _this = this;
      if (password == null) {
        password = '';
      }
      defer = this.hoodie.defer();
      key = "" + this._prefix + ":" + username;
      data = {
        _id: key,
        name: username,
        type: 'user',
        roles: [],
        password: password
      };
      request_promise = this.hoodie.request('PUT', "/_users/" + (encodeURIComponent(key)), {
        data: JSON.stringify(data),
        contentType: 'application/json'
      });
      handle_succes = function(response) {
        _this.hoodie.trigger('account:signed_up', username);
        _this._doc._rev = response.rev;
        return _this.sign_in(username, password).then(defer.resolve, defer.reject);
      };
      request_promise.then(handle_succes, defer.reject);
      return defer.promise();
    };

    Account.prototype.sign_in = function(username, password) {
      var defer, handle_succes, request_promise,
        _this = this;
      if (password == null) {
        password = '';
      }
      defer = this.hoodie.defer();
      request_promise = this.hoodie.request('POST', '/_session', {
        data: {
          name: username,
          password: password
        }
      });
      handle_succes = function(response) {
        _this.hoodie.trigger('account:signed_in', username);
        _this.fetch();
        return defer.resolve(username, response);
      };
      request_promise.then(handle_succes, defer.reject);
      return defer.promise();
    };

    Account.prototype.login = Account.prototype.sign_in;

    Account.prototype.change_password = function(current_password, new_password) {
      var data, defer, key,
        _this = this;
      if (current_password == null) {
        current_password = '';
      }
      defer = this.hoodie.defer();
      if (!this.username) {
        defer.reject({
          error: "unauthenticated",
          reason: "not logged in"
        });
        return defer.promise();
      }
      key = "" + this._prefix + ":" + this.username;
      data = $.extend({}, this._doc);
      delete data.salt;
      delete data.password_sha;
      data.password = new_password;
      return this.hoodie.request('PUT', "/_users/" + (encodeURIComponent(key)), {
        data: JSON.stringify(data),
        contentType: "application/json",
        success: function(response) {
          _this.fetch();
          return defer.resolve();
        },
        error: function(xhr) {
          var error;
          try {
            error = JSON.parse(xhr.responseText);
          } catch (e) {
            error = {
              error: xhr.responseText || "unknown"
            };
          }
          return defer.reject(error);
        }
      });
    };

    Account.prototype.sign_out = function() {
      var _this = this;
      return this.hoodie.request('DELETE', '/_session', {
        success: function() {
          return _this.hoodie.trigger('account:signed_out');
        }
      });
    };

    Account.prototype.logout = Account.prototype.sign_out;

    Account.prototype.on = function(event, cb) {
      return this.hoodie.on("account:" + event, cb);
    };

    Account.prototype.db = function() {
      var _ref;
      return (_ref = this.username) != null ? _ref.toLowerCase().replace(/@/, "$").replace(/\./g, "_") : void 0;
    };

    Account.prototype.fetch = function() {
      var defer, key,
        _this = this;
      defer = this.hoodie.defer();
      if (!this.username) {
        defer.reject({
          error: "unauthenticated",
          reason: "not logged in"
        });
        return defer.promise();
      }
      key = "" + this._prefix + ":" + this.username;
      this.hoodie.request('GET', "/_users/" + (encodeURIComponent(key)), {
        success: function(response) {
          _this._doc = response;
          return defer.resolve(response);
        },
        error: function(xhr) {
          var error;
          try {
            error = JSON.parse(xhr.responseText);
          } catch (e) {
            error = {
              error: xhr.responseText || "unknown"
            };
          }
          return defer.reject(error);
        }
      });
      return defer.promise();
    };

    Account.prototype.destroy = function() {
      var _this = this;
      return this.fetch().pipe(function() {
        var key;
        key = "" + _this._prefix + ":" + _this.username;
        return _this.hoodie.request('DELETE', "/_users/" + (encodeURIComponent(key)) + "?rev=" + _this._doc._rev);
      });
    };

    Account.prototype._prefix = 'org.couchdb.user';

    Account.prototype._doc = {};

    Account.prototype._handle_sign_in = function(username) {
      this.username = username;
      console.log('_handle_sign_in', this.username);
      this.hoodie.config.set('_account.username', this.username);
      return this._authenticated = true;
    };

    Account.prototype._handle_sign_out = function() {
      delete this.username;
      this.hoodie.config.remove('_account.username');
      return this._authenticated = false;
    };

    return Account;

  })();
});

// Generated by CoffeeScript 1.3.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define('hoodie/remote', ['hoodie/errors'], function(ERROR) {
  var Remote;
  return Remote = (function() {

    Remote.prototype.active = true;

    function Remote(hoodie) {
      this.hoodie = hoodie;
      this._handle_push_success = __bind(this._handle_push_success, this);

      this._handle_pull_results = __bind(this._handle_pull_results, this);

      this._handle_pull_error = __bind(this._handle_pull_error, this);

      this._handle_pull_success = __bind(this._handle_pull_success, this);

      this._restart_pull_request = __bind(this._restart_pull_request, this);

      this.sync = __bind(this.sync, this);

      this.push = __bind(this.push, this);

      this.pull = __bind(this.pull, this);

      this.disconnect = __bind(this.disconnect, this);

      this.connect = __bind(this.connect, this);

      this.deactivate = __bind(this.deactivate, this);

      this.activate = __bind(this.activate, this);

      if (this.hoodie.config.get('_remote.active') != null) {
        this.active = this.hoodie.config.get('_remote.active');
      }
      if (this.active) {
        this.activate();
      }
    }

    Remote.prototype.activate = function() {
      this.hoodie.config.set('_remote.active', true);
      this.hoodie.on('account:signed_out', this.disconnect);
      this.hoodie.on('account:signed_in', this.sync);
      return this.connect();
    };

    Remote.prototype.deactivate = function() {
      this.hoodie.config.set('_remote.active', false);
      this.hoodie.unbind('account:signed_in', this.sync);
      this.hoodie.unbind('account:signed_out', this.disconnect);
      return this.disconnect();
    };

    Remote.prototype.connect = function() {
      this.active = true;
      return this.hoodie.account.authenticate().pipe(this.sync);
    };

    Remote.prototype.disconnect = function() {
      var _ref, _ref1;
      this.active = false;
      this.hoodie.unbind('store:dirty:idle', this.push);
      this.hoodie.unbind('account:signed_in', this.connect);
      if ((_ref = this._pull_request) != null) {
        _ref.abort();
      }
      return (_ref1 = this._push_request) != null ? _ref1.abort() : void 0;
    };

    Remote.prototype.pull = function() {
      this._pull_request = this.hoodie.request('GET', this._pull_url(), {
        contentType: 'application/json'
      });
      if (this.active) {
        window.clearTimeout(this._pull_request_timeout);
        this._pull_request_timeout = window.setTimeout(this._restart_pull_request, 25000);
      }
      return this._pull_request.then(this._handle_pull_success, this._handle_pull_error);
    };

    Remote.prototype.push = function(docs) {
      var doc, docs_for_remote;
      if (!$.isArray(docs)) {
        docs = this.hoodie.store.changed_docs();
      }
      if (docs.length === 0) {
        return this.hoodie.defer().resolve([]).promise();
      }
      docs_for_remote = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = docs.length; _i < _len; _i++) {
          doc = docs[_i];
          _results.push(this._parse_for_remote(doc));
        }
        return _results;
      }).call(this);
      this._push_request = this.hoodie.request('POST', "/" + (encodeURIComponent(this.hoodie.account.db())) + "/_bulk_docs", {
        dataType: 'json',
        processData: false,
        contentType: 'application/json',
        data: JSON.stringify({
          docs: docs_for_remote,
          new_edits: false
        })
      });
      return this._push_request.done(this._handle_push_success(docs, docs_for_remote));
    };

    Remote.prototype.sync = function(docs) {
      if (this.active) {
        this.hoodie.unbind('store:dirty:idle', this.push);
        this.hoodie.on('store:dirty:idle', this.push);
      }
      return this.push(docs).pipe(this.pull);
    };

    Remote.prototype.on = function(event, cb) {
      return this.hoodie.on("remote:" + event, cb);
    };

    Remote.prototype._pull_url = function() {
      var since;
      since = this.hoodie.config.get('_remote.seq') || 0;
      if (this.active) {
        return "/" + (encodeURIComponent(this.hoodie.account.db())) + "/_changes?include_docs=true&heartbeat=10000&feed=longpoll&since=" + since;
      } else {
        return "/" + (encodeURIComponent(this.hoodie.account.db())) + "/_changes?include_docs=true&since=" + since;
      }
    };

    Remote.prototype._restart_pull_request = function() {
      var _ref;
      return (_ref = this._pull_request) != null ? _ref.abort() : void 0;
    };

    Remote.prototype._handle_pull_success = function(response) {
      this.hoodie.config.set('_remote.seq', response.last_seq);
      this._handle_pull_results(response.results);
      if (this.active) {
        return this.pull();
      }
    };

    Remote.prototype._handle_pull_error = function(xhr, error, resp) {
      switch (xhr.status) {
        case 403:
          this.hoodie.trigger('remote:error:unauthenticated', error);
          this.disconnect();
          if (this.active) {
            return this.hoodie.one('account:signed_in', this.connect);
          }
          break;
        case 404:
          return window.setTimeout(this.pull, 3000);
        case 500:
          this.hoodie.trigger('remote:error:server', error);
          return window.setTimeout(this.pull, 3000);
        default:
          if (!this.active) {
            return;
          }
          if (xhr.statusText === 'abort') {
            if (this.active) {
              return this.pull();
            }
          } else {
            if (this.active) {
              return window.setTimeout(this.pull, 3000);
            }
          }
      }
    };

    Remote.prototype._valid_special_attributes = ['_id', '_rev', '_deleted', '_revisions', '_attachments'];

    Remote.prototype._parse_for_remote = function(obj) {
      var attr, attributes;
      attributes = $.extend({}, obj);
      for (attr in attributes) {
        if (~this._valid_special_attributes.indexOf(attr)) {
          continue;
        }
        if (!/^_/.test(attr)) {
          continue;
        }
        delete attributes[attr];
      }
      attributes._id = "" + attributes.type + "/" + attributes.id;
      delete attributes.id;
      this._add_revision_to(attributes);
      return attributes;
    };

    Remote.prototype._generate_new_revision_id = function() {
      var timestamp, uuid;
      this._timezone_offset || (this._timezone_offset = new Date().getTimezoneOffset() * 60);
      timestamp = Date.now() + this._timezone_offset;
      uuid = this.hoodie.store.uuid(5);
      return "" + uuid + "#" + timestamp;
    };

    Remote.prototype._add_revision_to = function(attributes) {
      var current_rev_id, current_rev_nr, new_revision_id, _ref;
      try {
        _ref = attributes._rev.split(/-/), current_rev_nr = _ref[0], current_rev_id = _ref[1];
      } catch (_error) {}
      current_rev_nr = parseInt(current_rev_nr) || 0;
      new_revision_id = this._generate_new_revision_id();
      attributes._rev = "" + (current_rev_nr + 1) + "-" + new_revision_id;
      attributes._revisions = {
        start: 1,
        ids: [new_revision_id]
      };
      if (current_rev_id) {
        attributes._revisions.start += current_rev_nr;
        return attributes._revisions.ids.push(current_rev_id);
      }
    };

    Remote.prototype._parse_from_pull = function(obj) {
      var id, _ref;
      id = obj._id || obj.id;
      delete obj._id;
      _ref = id.split(/\//), obj.type = _ref[0], obj.id = _ref[1];
      if (obj.created_at) {
        obj.created_at = new Date(Date.parse(obj.created_at));
      }
      if (obj.updated_at) {
        obj.updated_at = new Date(Date.parse(obj.updated_at));
      }
      if (obj.rev) {
        obj._rev = obj.rev;
        delete obj.rev;
      }
      return obj;
    };

    Remote.prototype._parse_from_push = function(obj) {
      var id, _ref;
      id = obj._id || delete obj._id;
      _ref = obj.id.split(/\//), obj.type = _ref[0], obj.id = _ref[1];
      obj._rev = obj.rev;
      delete obj.rev;
      delete obj.ok;
      return obj;
    };

    Remote.prototype._handle_pull_results = function(changes) {
      var doc, promise, _changed_docs, _destroyed_docs, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _results,
        _this = this;
      _destroyed_docs = [];
      _changed_docs = [];
      for (_i = 0, _len = changes.length; _i < _len; _i++) {
        doc = changes[_i].doc;
        doc = this._parse_from_pull(doc);
        if (doc._deleted) {
          _destroyed_docs.push([
            doc, this.hoodie.store.destroy(doc.type, doc.id, {
              remote: true
            })
          ]);
        } else {
          _changed_docs.push([
            doc, this.hoodie.store.update(doc.type, doc.id, doc, {
              remote: true
            })
          ]);
        }
      }
      for (_j = 0, _len1 = _destroyed_docs.length; _j < _len1; _j++) {
        _ref = _destroyed_docs[_j], doc = _ref[0], promise = _ref[1];
        promise.then(function(object) {
          _this.hoodie.trigger('remote:destroyed', doc.type, doc.id, object);
          _this.hoodie.trigger("remote:destroyed:" + doc.type, doc.id, object);
          _this.hoodie.trigger("remote:destroyed:" + doc.type + ":" + doc.id, object);
          _this.hoodie.trigger('remote:changed', 'destroyed', doc.type, doc.id, object);
          _this.hoodie.trigger("remote:changed:" + doc.type, 'destroyed', doc.id, object);
          return _this.hoodie.trigger("remote:changed:" + doc.type + ":" + doc.id, 'destroyed', object);
        });
      }
      _results = [];
      for (_k = 0, _len2 = _changed_docs.length; _k < _len2; _k++) {
        _ref1 = _changed_docs[_k], doc = _ref1[0], promise = _ref1[1];
        _results.push(promise.then(function(object, object_was_created) {
          var event;
          event = object_was_created ? 'created' : 'updated';
          _this.hoodie.trigger("remote:" + event, doc.type, doc.id, object);
          _this.hoodie.trigger("remote:" + event + ":" + doc.type, doc.id, object);
          _this.hoodie.trigger("remote:" + event + ":" + doc.type + ":" + doc.id, object);
          _this.hoodie.trigger("remote:changed", event, doc.type, doc.id, object);
          _this.hoodie.trigger("remote:changed:" + doc.type, event, doc.id, object);
          return _this.hoodie.trigger("remote:changed:" + doc.type + ":" + doc.id, event, object);
        }));
      }
      return _results;
    };

    Remote.prototype._handle_push_success = function(docs, pushed_docs) {
      var _this = this;
      return function() {
        var doc, i, options, update, _i, _len, _results;
        _results = [];
        for (i = _i = 0, _len = docs.length; _i < _len; i = ++_i) {
          doc = docs[i];
          update = {
            _rev: pushed_docs[i]._rev
          };
          options = {
            remote: true
          };
          _results.push(_this.hoodie.store.update(doc.type, doc.id, update, options));
        }
        return _results;
      };
    };

    return Remote;

  })();
});

// Generated by CoffeeScript 1.3.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define('hoodie/email',[], function() {
  var Email;
  return Email = (function() {

    function Email(hoodie) {
      this.hoodie = hoodie;
      this._handle_email_update = __bind(this._handle_email_update, this);

    }

    Email.prototype.send = function(email_attributes) {
      var attributes, defer,
        _this = this;
      if (email_attributes == null) {
        email_attributes = {};
      }
      defer = this.hoodie.defer();
      attributes = $.extend({}, email_attributes);
      if (!this._is_valid_email(email_attributes.to)) {
        attributes.error = "Invalid email address (" + (attributes.to || 'empty') + ")";
        return defer.reject(attributes).promise();
      }
      this.hoodie.store.create('$email', attributes).then(function(obj) {
        return _this._handle_email_update(defer, obj);
      });
      return defer.promise();
    };

    Email.prototype._is_valid_email = function(email) {
      if (email == null) {
        email = '';
      }
      return /@/.test(email);
    };

    Email.prototype._handle_email_update = function(defer, attributes) {
      var _this = this;
      if (attributes == null) {
        attributes = {};
      }
      if (attributes.error) {
        return defer.reject(attributes);
      } else if (attributes.delivered_at) {
        return defer.resolve(attributes);
      } else {
        return this.hoodie.one("remote:updated:$email:" + attributes.id, function(attributes) {
          return _this._handle_email_update(defer, attributes);
        });
      }
    };

    return Email;

  })();
});

// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('hoodie/sharing/hoodie', ['hoodie'], function(Hoodie) {
  var SharingHoodie;
  return SharingHoodie = (function(_super) {

    __extends(SharingHoodie, _super);

    SharingHoodie.prototype.modules = ['hoodie/sharing/account', 'hoodie/sharing/remote'];

    function SharingHoodie(hoodie, sharing) {
      var event, _i, _len, _ref,
        _this = this;
      this.sharing = sharing;
      this.store = hoodie.store;
      this.config = {
        set: this.sharing.set,
        get: this.sharing.get,
        remove: this.sharing.set
      };
      this.config.set('_account.username', "sharing/" + this.sharing.id);
      this.config.set('_remote.active', this.sharing.continuous === true);
      _ref = ['store:dirty:idle'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        event = _ref[_i];
        hoodie.on(event, function() {
          return _this.trigger(event);
        });
      }
      SharingHoodie.__super__.constructor.call(this, hoodie.base_url);
    }

    SharingHoodie.prototype.request = function(type, path, options) {
      var auth, defaults, hash;
      if (options == null) {
        options = {};
      }
      defaults = {
        type: type,
        url: "" + this.base_url + path,
        xhrFields: {
          withCredentials: true
        },
        crossDomain: true,
        dataType: 'json'
      };
      if (type !== 'PUT') {
        hash = btoa("sharing/" + this.sharing.id + ":" + (this.sharing.password || ''));
        auth = "Basic " + hash;
        $.extend(defaults, {
          headers: {
            Authorization: auth
          }
        });
      }
      return $.ajax($.extend(defaults, options));
    };

    return SharingHoodie;

  })(Hoodie);
});

// Generated by CoffeeScript 1.3.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __slice = [].slice;

define('hoodie/sharing/instance', ['hoodie/config', 'hoodie/sharing/hoodie'], function(Config, SharingHoodie) {
  var SharingInstance;
  return SharingInstance = (function() {

    function SharingInstance(options) {
      if (options == null) {
        options = {};
      }
      this._sync = __bind(this._sync, this);

      this._toggle = __bind(this._toggle, this);

      this._remove = __bind(this._remove, this);

      this._add = __bind(this._add, this);

      this._is_my_shared_object_and_changed = __bind(this._is_my_shared_object_and_changed, this);

      this.sync = __bind(this.sync, this);

      this.get = __bind(this.get, this);

      this.set = __bind(this.set, this);

      this.hoodie = this.constructor.hoodie;
      this.anonymous = this.hoodie.account.username === void 0;
      this.set(options);
      this._assure_owner_uuid();
      if (this.anonymous) {
        this.hoodie = new SharingHoodie(this.hoodie, this);
      }
    }

    SharingInstance.prototype._memory = {};

    SharingInstance.prototype.set = function(key, value) {
      var _key, _ref;
      if (typeof key === 'object') {
        for (_key in key) {
          value = key[_key];
          this[_key] = this._memory[_key] = value;
        }
      } else {
        this[key] = this._memory[key] = value;
      }
      if ((_ref = this.invitees) != null ? _ref.length : void 0) {
        this["private"] = this._memory["private"] = true;
      }
      return void 0;
    };

    SharingInstance.prototype.get = function(key) {
      return this[key];
    };

    SharingInstance.prototype.save = function(update, options) {
      var defer, _handle_update,
        _this = this;
      if (update == null) {
        update = {};
      }
      defer = this.hoodie.defer();
      if (update) {
        this.set(update);
      }
      _handle_update = function(properties, was_created) {
        _this._memory = {};
        $.extend(_this, properties);
        return defer.resolve(_this);
      };
      this.hoodie.store.update("$sharing", this.id, this._memory, options).then(_handle_update, defer.reject);
      return defer.promise();
    };

    SharingInstance.prototype.add = function(objects) {
      return this.toggle(objects, true);
    };

    SharingInstance.prototype.remove = function(objects) {
      return this.toggle(objects, false);
    };

    SharingInstance.prototype.toggle = function(objects, do_add) {
      var update_method;
      if (!(this.hoodie.isPromise(objects) || $.isArray(objects))) {
        objects = [objects];
      }
      update_method = (function() {
        switch (do_add) {
          case true:
            return this._add;
          case false:
            return this._remove;
          default:
            return this._toggle;
        }
      }).call(this);
      return this.hoodie.store.updateAll(objects, update_method);
    };

    SharingInstance.prototype.sync = function() {
      var _this = this;
      if (this.hasAccount()) {
        return (this.sync = this._sync)();
      } else {
        return this.hoodie.account.sign_up("sharing/" + this.id, this.password).done(function(username, response) {
          _this.save({
            _user_rev: _this.hoodie.account._doc._rev
          });
          return (_this.sync = _this._sync)();
        });
      }
    };

    SharingInstance.prototype.hasAccount = function() {
      return !this.anonymous || (this._user_rev != null);
    };

    SharingInstance.prototype._assure_owner_uuid = function() {
      var config;
      if (this.owner_uuid) {
        return;
      }
      config = this.constructor.hoodie.config;
      this.owner_uuid = config.get('sharing.owner_uuid');
      if (!this.owner_uuid) {
        this.owner_uuid = this.constructor.hoodie.store.uuid();
        return config.set('sharing.owner_uuid', this.owner_uuid);
      }
    };

    SharingInstance.prototype._is_my_shared_object_and_changed = function(obj) {
      var belongs_to_me;
      belongs_to_me = obj.id === this.id || obj.$sharings && ~obj.$sharings.indexOf(this.id);
      return belongs_to_me && this.hoodie.store.is_dirty(obj.type, obj.id);
    };

    SharingInstance.prototype._add = function(obj) {
      var new_value;
      new_value = obj.$sharings ? !~obj.$sharings.indexOf(this.id) ? obj.$sharings.concat(this.id) : void 0 : [this.id];
      if (new_value) {
        delete this.$docs_to_remove["" + obj.type + "/" + obj.id];
        this.set('$docs_to_remove', this.$docs_to_remove);
      }
      return {
        $sharings: new_value
      };
    };

    SharingInstance.prototype.$docs_to_remove = {};

    SharingInstance.prototype._remove = function(obj) {
      var $sharings, idx;
      try {
        $sharings = obj.$sharings;
        if (~(idx = $sharings.indexOf(this.id))) {
          $sharings.splice(idx, 1);
          this.$docs_to_remove["" + obj.type + "/" + obj.id] = {
            _rev: obj._rev
          };
          this.set('$docs_to_remove', this.$docs_to_remove);
          return {
            $sharings: $sharings.length ? $sharings : void 0
          };
        }
      } catch (_error) {}
    };

    SharingInstance.prototype._toggle = function() {
      var do_add;
      try {
        do_add = ~obj.$sharings.indexOf(this.id);
      } catch (e) {
        do_add = true;
      }
      if (do_add) {
        return this._add(obj);
      } else {
        return this._remove(obj);
      }
    };

    SharingInstance.prototype._sync = function() {
      var _this = this;
      return this.save().pipe(this.hoodie.store.loadAll(this._is_my_shared_object_and_changed).pipe(function(shared_object_that_changed) {
        return _this.hoodie.remote.sync(shared_object_that_changed).then(_this._handle_remote_changes);
      }));
    };

    SharingInstance.prototype._handle_remote_changes = function() {
      return console.log.apply(console, ['_handle_remote_changes'].concat(__slice.call(arguments)));
    };

    return SharingInstance;

  })();
});

// Generated by CoffeeScript 1.3.3

define('hoodie/sharing', ['hoodie/sharing/instance'], function(SharingInstance) {
  var Sharing;
  return Sharing = (function() {

    function Sharing(hoodie) {
      this.hoodie = hoodie;
      SharingInstance.hoodie = this.hoodie;
    }

    Sharing.prototype.create = function(options) {
      var sharing;
      if (options == null) {
        options = {};
      }
      sharing = new SharingInstance(options);
      return sharing.save();
    };

    Sharing.prototype.load = function(id) {
      var _this = this;
      return this.hoodie.store.load('$sharing', id).pipe(function(obj) {
        return new SharingInstance(obj);
      });
    };

    Sharing.prototype.find_or_create = function(options) {
      var defer,
        _this = this;
      defer = this.hoodie.defer();
      this.load(options.id).done(function(sharing) {
        return defer.resolve(sharing);
      }).fail(function() {
        return _this.create(options).then(defer.resolve, defer.reject);
      });
      return defer.promise();
    };

    Sharing.prototype.destroy = function(id) {
      var _this = this;
      return this.load(id).pipe(function(obj) {
        var sharing;
        sharing = new SharingInstance(obj);
        return sharing.destroy();
      });
    };

    Sharing.prototype["delete"] = Sharing.prototype.destroy;

    Sharing.prototype.open = function(id, options) {
      if (options == null) {
        options = {};
      }
    };

    return Sharing;

  })();
});

// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('hoodie/sharing/account', ['hoodie/account'], function(Account) {
  return Account = (function(_super) {

    __extends(Account, _super);

    function Account() {
      Account.__super__.constructor.apply(this, arguments);
      this._sharing_auth_promise = this.hoodie.defer().resolve(this.username).promise();
    }

    Account.prototype.authenticate = function() {
      return this._sharing_auth_promise;
    };

    Account.prototype.sign_up = function() {
      return this._sharing_auth_promise;
    };

    Account.prototype.sign_in = function() {
      return this._sharing_auth_promise;
    };

    Account.prototype.sign_out = function() {
      return this._sharing_auth_promise;
    };

    return Account;

  })(Account);
});

// Generated by CoffeeScript 1.3.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('hoodie/sharing/remote', ['hoodie/remote'], function(Remote) {
  return Remote = (function(_super) {

    __extends(Remote, _super);

    function Remote() {
      this._handle_push_success = __bind(this._handle_push_success, this);

      this.push = __bind(this.push, this);
      return Remote.__super__.constructor.apply(this, arguments);
    }

    Remote.prototype.push = function(docs) {
      var obj;
      if (!$.isArray(docs)) {
        docs = (function() {
          var _i, _len, _ref, _results;
          _ref = this.hoodie.store.changed_docs();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            obj = _ref[_i];
            if (obj.id === this.hoodie.sharing.id || obj.$sharings && ~obj.$sharings.indexOf(this.hoodie.sharing.id)) {
              _results.push(obj);
            }
          }
          return _results;
        }).call(this);
      }
      return Remote.__super__.push.call(this, docs);
    };

    Remote.prototype._pull_url = function() {
      var since;
      since = this.hoodie.config.get('_remote.seq') || 0;
      if (this.active) {
        return "/" + (encodeURIComponent(this.hoodie.account.db())) + "/_changes?filter=%24sharing_" + this.hoodie.sharing.id + "/owned&include_docs=true&since=" + since + "&heartbeat=10000&feed=longpoll";
      } else {
        return "/" + (encodeURIComponent(this.hoodie.account.db())) + "/_changes?filter=%24sharing_" + this.hoodie.sharing.id + "/owned&include_docs=true&since=" + since;
      }
    };

    Remote.prototype._add_revision_to = function(obj) {
      var doc, key, _ref;
      if (obj.$docs_to_remove) {
        console.log("obj.$docs_to_remove");
        console.log(obj.$docs_to_remove);
        _ref = obj.$docs_to_remove;
        for (key in _ref) {
          doc = _ref[key];
          this._add_revision_to(doc);
        }
      }
      return Remote.__super__._add_revision_to.call(this, obj);
    };

    Remote.prototype._handle_push_success = function(docs, pushed_docs) {
      var _this = this;
      return function() {
        var doc, i, id, key, pushed_doc, type, update, _i, _j, _len, _len1, _ref, _ref1;
        for (_i = 0, _len = pushed_docs.length; _i < _len; _i++) {
          pushed_doc = pushed_docs[_i];
          if (pushed_doc.$docs_to_remove) {
            _ref = pushed_doc.$docs_to_remove;
            for (key in _ref) {
              doc = _ref[key];
              _ref1 = key.split(/\//), type = _ref1[0], id = _ref1[1];
              update = {
                _rev: doc._rev
              };
              for (i = _j = 0, _len1 = docs.length; _j < _len1; i = ++_j) {
                doc = docs[i];
                _this.hoodie.store.update(type, id, update, {
                  remote: true
                });
              }
            }
          }
        }
        return Remote.__super__._handle_push_success.call(_this, docs, pushed_docs)();
      };
    };

    return Remote;

  })(Remote);
});
}())